INSERT INTO "MEMBER"
VALUES (SEQ_MEMBER_NO.NEXTVAL,
				'홍길동', 'member01@jmt.co.kr',
				'pass01!', DEFAULT, DEFAULT, NULL, DEFAULT,
				DEFAULT,'010-2222-3333');
				
INSERT INTO "MEMBER"
VALUES (SEQ_MEMBER_NO.NEXTVAL,
				'김철수', 'member02@bcs.co.kr',
				'pass01!', DEFAULT, DEFAULT, NULL, DEFAULT,
				DEFAULT,'010-1234-5678');
				
INSERT INTO "MEMBER"
VALUES (SEQ_MEMBER_NO.NEXTVAL,
				'신유리', 'member03@bcs.co.kr',
				'pass01!', DEFAULT, DEFAULT, NULL, DEFAULT,
				DEFAULT,'010-2233-1144');
				
INSERT INTO "MEMBER"
VALUES (SEQ_MEMBER_NO.NEXTVAL,
				'훈이훈이', 'membe401@bcs.co.kr',
				'pass01!', DEFAULT, DEFAULT, NULL, DEFAULT,
				DEFAULT,'010-3232-1212');
				
			
COMMIT;

SELECT * FROM "MEMBER";


INSERT INTO "POINT_LOG"
VALUES (SEQ_POINT_LOG_NO.NEXTVAL,
				(SELECT MEMBER_POINT
				 FROM "MEMBER"
				 WHERE MEMBER_NO = 1),
				'포인트 충전', 
				30000, DEFAULT, 1);
				

SELECT * FROM "POINT_LOG";
				

COMMIT;
				

				
INSERT INTO RAM 
VALUES (1, '2 GB');

INSERT INTO RAM 
VALUES (2, '4 GB');

INSERT INTO RAM 
VALUES (3, '6 GB');

INSERT INTO RAM 
VALUES (4, '8 GB');

INSERT INTO RAM 
VALUES (5, '12 GB');

COMMIT;
				
				
				
INSERT INTO DISPLAY 
VALUES (1, '6.1');
				

SELECT * FROM "DEVICE";


INSERT INTO "DEVICE"
VALUES (
	SEQ_DEVICE_NO.NEXTVAL,
	TO_DATE ('2023-10-09', 'YYYY-MM-DD'),
	'2000000',
	'222',
	'iOS 16',
	'2566 x 1179',
	'19.5:9 비율 Super Retina XDR Display',
	'1,200만',
	'1,200만 / 4,800만',
	DEFAULT, DEFAULT,
	'187 g',
	'256 GB',
	'iPhone 15 PRO',
	'1050000',
	'880000',
	'Apple',
	'4',
	'2x Apple Everest 3.78 GHz, 4x Apple Sawtooth 2.11 GHz',
	'1'
);

INSERT INTO "DEVICE"
VALUES (
	SEQ_DEVICE_NO.NEXTVAL,
	TO_DATE ('2023-10-09', 'YYYY-MM-DD'),
	'2000000',
	'222',
	'iOS 16',
	'2566 x 1179',
	'19.5:9 비율 Super Retina XDR Display',
	'1,200만',
	'1,200만 / 4,800만',
	DEFAULT, DEFAULT,
	'187 g',
	'512 GB',
	'iPhone 15 PRO',
	'1050000',
	'880000',
	'Apple',
	'4',
	'2x Apple Everest 3.78 GHz, 4x Apple Sawtooth 2.11 GHz',
	'1'
);






INSERT INTO "DEVICE"
VALUES (
	SEQ_DEVICE_NO.NEXTVAL,
	TO_DATE ('20231009', 'YYYY-MM-DD'),
	'2000000',
	'222',
	'iOS 16',
	'2566 x 1179',
	'19.5:9 비율 Super Retina XDR Display',
	'1,200만',
	'1,200만 / 4,800만',
	DEFAULT, DEFAULT,
	'187 g',
	'3,274 mAh',
	'iPhone 15 PRO',
	'1050000',
	'880000',
	'Apple',
	'4',
	'2x Apple Everest 3.78 GHz, 4x Apple Sawtooth 2.11 GHz',
	'1'
);
						

INSERT INTO COLOR 
VALUES (
	SEQ_COLOR_NO.NEXTVAL,
	'내추럴 티타늄',
	'#b9b4a9',
	'이미지',
	'3'						-- 기종 번호
);

INSERT INTO COLOR 
VALUES (
	SEQ_COLOR_NO.NEXTVAL,
	'블루 티타늄',
	'#4b5261',
	'이미지',
	'3'
);

INSERT INTO COLOR 
VALUES (
	SEQ_COLOR_NO.NEXTVAL,
	'화이트 티타늄',
	'#efeee9',
	'이미지',
	'3'
);

INSERT INTO COLOR 
VALUES (
	SEQ_COLOR_NO.NEXTVAL,
	'블랙 티타늄',
	'#4c4d4f',
	'이미지',
	'3'
);
				

INSERT INTO "CAPACITY_PRICE"
VALUES (
	3, 2, 0, 0					-- 기종 번호, 용량 코드, 가격
);

INSERT INTO "CAPACITY_PRICE"
VALUES (
	3, 3, 90000, 50000
);

INSERT INTO "CAPACITY_PRICE"
VALUES (
	3, 4, 170000, 90000			
);

INSERT INTO "CAPACITY_PRICE"
VALUES (
	3, 5, 250000, 150000
);

SELECT * FROM "CAPACITY_PRICE";
				
				
COMMIT;

INSERT INTO "GRADE"
VALUES (
	SEQ_GRADE_NO.NEXTVAL,
	'B', 0, 0, 3						-- 기종 번호
);

INSERT INTO "GRADE"
VALUES (
	SEQ_GRADE_NO.NEXTVAL,
	'A', 40000, 20000, 3
);

INSERT INTO "GRADE"
VALUES (
	SEQ_GRADE_NO.NEXTVAL,
	'S', 70000, 40000, 3
);



INSERT INTO "GRADE"
VALUES (
	SEQ_GRADE_NO.NEXTVAL,
	'S', 70000, 40000, 57
);


COMMIT;



SELECT * FROM "GRADE";
				
COMMIT;
				




INSERT INTO "CAPACITY"
VALUES (
	1, '64 GB'
);
			
INSERT INTO "CAPACITY"
VALUES (
	2, '128 GB'
);
				
INSERT INTO "CAPACITY"
VALUES (
	3, '256 GB'
);
				
INSERT INTO "CAPACITY"
VALUES (
	4, '512 GB'
);
				
INSERT INTO "CAPACITY"
VALUES (
	5, '1 TB'
);
		

ALTER TABLE "GRADE" ADD GRADE_SELL_SCALE NUMBER NOT NULL;
ALTER TABLE "GRADE" MODIFY DEVICE_NO VISIBLE;

ALTER TABLE CAPACITY_PRICE ADD CAPACITY_SELL_PRICE NUMBER NOT NULL;
ALTER TABLE "GRADE" MODIFY DEVICE_NO VISIBLE;


ALTER TABLE "SELLING_DEVICE" ADD CLIENT_NAME NVARCHAR2(10) NOT NULL;
ALTER TABLE "SELLING_DEVICE" ADD CLIENT_TEL VARCHAR2(30) NOT NULL;

--- device sql ---

SELECT 
	DEVICE_RELEASE_DATE,
	DEVICE_RELEASE_PRICE,
	DEVICE_IMG,
	DEVICE_OS,
	DEVICE_RESOLUTION,
	DEVICE_PIXEL,
	DEVICE_FRONT_PIXEL,
	DEVICE_BACK_PIXEL,
	DEVICE_WIRELESS_CHARGE,
	DEVICE_FAST_CHARGE,
	DEVICE_WEIGHT,
	DEVICE_BATTERY_CAPACITY,
	DEVICE_NAME,
	DEVICE_BUYING_PRICE,
	DEVICE_SELLING_PRICE,
	DEVICE_BRAND,
	DEVICE_CPU_NAME,
	(SELECT DEVICE_DISPLAY_SIZE
	 FROM
	 	DISPLAY
	 WHERE
	 	DEVICE_DISPLAY_CODE = D.DEVICE_DISPLAY_CODE
	 ) "DISPLAY_SIZE",
	(SELECT DEVICE_RAM_CAPACITY
	 FROM
	 	RAM
	 WHERE
	 	DEVICE_RAM_CODE = D.DEVICE_RAM_CODE
	 ) "RAM_CAPACITY"
FROM 
	DEVICE D
WHERE
	DEVICE_NO = 3;



SELECT
	COLOR_NAME,
	COLOR_CODE,
	COLOR_DEVICE_IMG
FROM
	COLOR
WHERE
	DEVICE_NO = 3;


SELECT
	CAPACITY_TYPE,
	CAPACITY_PRICE
FROM 
	CAPACITY_PRICE
LEFT JOIN 
	CAPACITY USING (CAPACITY_NUMBER)
WHERE
	DEVICE_NO = 3
ORDER BY CAPACITY_PRICE ASC;


SELECT
	GRADE_TYPE,
	GRADE_PRICE
FROM
	GRADE
WHERE
	DEVICE_NO = 3
ORDER BY GRADE_PRICE ASC;
	

INSERT INTO SELLING_DEVICE_STATUS
VALUES (
	1, '신청');

INSERT INTO SELLING_DEVICE_STATUS
VALUES (
	2, '반려');

INSERT INTO SELLING_DEVICE_STATUS
VALUES (
	3, '송금');

COMMIT;

SELECT * FROM DEVICE;



SELECT
	(SELECT 
		DEVICE_NAME
	 FROM "DEVICE"
	 WHERE DEVICE_NO = S.DEVICE_NO) "DEVICE_NAME",
	 CLIENT_BANK,
	 ACCOUNT_NO,
	 REQUEST_COMMENT,
	(SELECT
	 		CAPACITY_TYPE
	 FROM CAPACITY
	 WHERE CAPACITY_NUMBER = S.CAPACITY_NUMBER) "CAPACITY_TYPE",
	(SELECT
			GRADE_TYPE
	 FROM "GRADE"
	 WHERE GRADE_NUMBER = S.GRADE_NUMBER) "GRADE_TYPE",
	(SELECT
			COLOR_NAME
	 FROM COLOR
	 WHERE COLOR_NO = S.COLOR_NO) "COLOR_NAME",
	 MEMBER_NO,
	 CLIENT_NAME,
	 CLIENT_TEL
FROM SELLING_DEVICE S
WHERE
	SELLING_DEVICE_NO = 3;
				
				



SELECT *
FROM BUYING_DEVICE;


SELECT C.COLOR_NO AS "colorNo", 
TO_CHAR((
	SELECT COUNT(*)
	FROM BUYING_DEVICE
	WHERE
		DEVICE_NO = 18
	AND
		COLOR_NO = C.COLOR_NO)
		) AS "colorCount"
FROM
	COLOR C 
LEFT JOIN 
	BUYING_DEVICE B ON (B.DEVICE_NO = C.DEVICE_NO)
WHERE
	C.DEVICE_NO = 18
GROUP BY C.COLOR_NO;
	



SELECT C.CAPACITY_NUMBER AS "capacityNumber", (
	SELECT COUNT(*)
	FROM BUYING_DEVICE
	WHERE
		DEVICE_NO = 3
	AND
		COLOR_NO = 1
	AND
		CAPACITY_NUMBER = C.CAPACITY_NUMBER
	) AS "capacityCount"
FROM
	CAPACITY_PRICE C 
LEFT JOIN 
	BUYING_DEVICE B ON (B.DEVICE_NO = C.DEVICE_NO)
WHERE
	C.DEVICE_NO = 3
AND 
	B.SOLD_FL = 'N'
GROUP BY C.CAPACITY_NUMBER;






SELECT G.GRADE_NUMBER AS "gradeNumber", (
	SELECT COUNT(*)
	FROM BUYING_DEVICE
	WHERE
		DEVICE_NO = 3
	AND
		COLOR_NO = 1
	AND
		CAPACITY_NUMBER = 3
	AND
		GRADE_NUMBER = G.GRADE_NUMBER
	) AS "gradeCount"
FROM
	GRADE G 
LEFT JOIN 
	BUYING_DEVICE B ON (B.DEVICE_NO = G.DEVICE_NO)
WHERE
	G.DEVICE_NO = 3
GROUP BY G.GRADE_NUMBER;


-- 예상 가격
SELECT
	(
		DEVICE_BUYING_PRICE + 
		(SELECT GRADE_PRICE
		 FROM GRADE
		 WHERE
		 	GRADE_NUMBER = 8) +
		(SELECT CAPACITY_PRICE
		 FROM CAPACITY_PRICE
		 WHERE 
		 	DEVICE_NO = 3
		 AND
		 	CAPACITY_NUMBER = 3)
	) AS "PRICE"
FROM DEVICE
WHERE
	DEVICE_NO = 3;

SELECT
	(
		DEVICE_BUYING_PRICE + 
		(SELECT GRADE_PRICE
		 FROM GRADE
		 JOIN BUYING_DEVICE USING (GRADE_NUMBER)
		 WHERE
		 	BUYING_DEVICE_NO = 12
				) +
		(SELECT CAPACITY_PRICE
		 FROM CAPACITY_PRICE
		 RIGHT JOIN BUYING_DEVICE USING (CAPACITY_NUMBER)
		 WHERE
		 	BUYING_DEVICE_NO = 12)
	) AS "PRICE"
FROM DEVICE

WHERE
	DEVICE_NO = (
		SELECT
			DEVICE_NO
		FROM BUYING_DEVICE
		WHERE 
			BUYING_DEVICE_NO = 12
	);


SELECT ((
	SELECT GRADE_PRICE
	FROM BUYING_DEVICE BD
	JOIN GRADE G USING (GRADE_NUMBER)
	WHERE 
		BUYING_DEVICE_NO = 12
	AND
		G.DEVICE_NO = BD.DEVICE_NO
) + (
	SELECT DEVICE_BUYING_PRICE
	FROM BUYING_DEVICE BD
	LEFT JOIN DEVICE D USING (DEVICE_NO)
	WHERE 
		BUYING_DEVICE_NO = 12
) + (
	SELECT CAPACITY_PRICE
	FROM BUYING_DEVICE BD
	JOIN CAPACITY_PRICE CP USING (CAPACITY_NUMBER)
	WHERE 
		BUYING_DEVICE_NO = 12
	AND
		CP.DEVICE_NO = BD.DEVICE_NO
)) DEVICE_PRICE
FROM DUAL;




SELECT
	ORDER_NAME,
	ORDER_TEL,
	ORDER_COMMENT,
	ORDER_ADDRESS,
	MEMBER_NO,
	O.BUYING_DEVICE_NO AS "BUYING_DEVICE_NO",
	D.DEVICE_NAME AS "DEVICE_NAME",
	C.COLOR_NAME AS "COLOR_NAME",
	CP.CAPACITY_TYPE AS "CAPACITY_TYPE",
	G.GRADE_TYPE AS "GRADE_TYPE"
FROM "ORDER" O
LEFT JOIN BUYING_DEVICE BD ON (O.BUYING_DEVICE_NO = BD.BUYING_DEVICE_NO)
LEFT JOIN DEVICE D ON (BD.DEVICE_NO = D.DEVICE_NO)
LEFT JOIN COLOR C ON (BD.COLOR_NO = C.COLOR_NO)
LEFT JOIN CAPACITY CP ON (BD.CAPACITY_NUMBER = CP.CAPACITY_NUMBER)
LEFT JOIN GRADE G ON (BD.GRADE_NUMBER = G.GRADE_NUMBER)
WHERE ORDER_NO = 5;

UPDATE "BUYING_DEVICE"
SET 
	SOLD_FL = 'Y',
	BUYING_DEVICE_SOLD_DATE = CURRENT_DATE
WHERE
	BUYING_DEVICE_NO = 16;

COMMIT;

SELECT D.DEVICE_NO,
	NVL((SELECT COUNT(*)
	 FROM "ORDER"
	 JOIN BUYING_DEVICE USING (BUYING_DEVICE_NO)
	 WHERE D.DEVICE_NO = BUYING_DEVICE.DEVICE_NO
	 GROUP BY DEVICE_NO), 0) AS "ORDER_COUNT",
	NVL((SELECT COUNT(*)
	 FROM "BUYING_DEVICE"
	 WHERE D.DEVICE_NO = BUYING_DEVICE.DEVICE_NO
	 AND SOLD_FL = 'N'
	 GROUP BY DEVICE_NO), 0) AS "DEVICE_COUNT",
	NVL((SELECT COUNT(*)
	 FROM "COLOR"
	 WHERE D.DEVICE_NO = COLOR.DEVICE_NO
	 GROUP BY DEVICE_NO), 0) AS "COLOR_COUT"
FROM DEVICE D;


SELECT COUNT(*)
	 FROM "BUYING_DEVICE"
	 WHERE D.DEVICE_NO = BUYING_DEVICE.DEVICE_NO
	 GROUP BY DEVICE_NO

	
	SELECT DEVICE_BUYING_PRICE
	FROM BUYING_DEVICE BD
	LEFT JOIN DEVICE D USING (DEVICE_NO)
	WHERE 
		BUYING_DEVICE_NO = 12;

	
	SELECT CAPACITY_PRICE
	FROM BUYING_DEVICE BD
	JOIN CAPACITY_PRICE CP USING (CAPACITY_NUMBER)
	WHERE 
		BUYING_DEVICE_NO = 12
	AND
		CP.DEVICE_NO = BD.DEVICE_NO;
	


----------------------------------------

INSERT INTO "BUYING_DEVICE"
VALUES(
   SEQ_BUYING_DEVICE_NO.NEXTVAL,		-- 번호
   DEFAULT,   											-- 등록일
   NULL,														-- 판매일
   NULL,													-- 최종 구매가
   3,															-- 용량
   3,															-- 기종
   7,															-- 등급
   'N',
   1
);


INSERT INTO "BUYING_DEVICE"
VALUES(
   SEQ_BUYING_DEVICE_NO.NEXTVAL,		-- 번호
   DEFAULT,   											-- 등록일
   NULL,														-- 판매일
   NULL,													-- 최종 구매가
   4,															-- 용량
   3,															-- 기종
   7,															-- 등급
   'N',
   1															-- 색상
);

INSERT INTO "BUYING_DEVICE"
VALUES(
   SEQ_BUYING_DEVICE_NO.NEXTVAL,		-- 번호
   DEFAULT,   											-- 등록일
   NULL,														-- 판매일
   NULL,													-- 최종 구매가
   4,															-- 용량
   3,															-- 기종
   8,															-- 등급
   'N',
   1															-- 색상
);



INSERT INTO "BUYING_DEVICE"
VALUES(
   SEQ_BUYING_DEVICE_NO.NEXTVAL,		-- 번호
   DEFAULT,   											-- 등록일
   NULL,														-- 판매일
   NULL,													-- 최종 구매가
   4,															-- 용량
   3,															-- 기종
   8,															-- 등급
   'N',
   2															-- 색상
);


INSERT INTO "BUYING_DEVICE"
VALUES(
   SEQ_BUYING_DEVICE_NO.NEXTVAL,		-- 번호
   DEFAULT,   											-- 등록일
   NULL,														-- 판매일
   NULL,													-- 최종 구매가
   5,															-- 용량
   3,															-- 기종
   8,															-- 등급
   'N',
   2															-- 색상
);


COMMIT;




SELECT 
	BUYING_DEVICE_NO,
	COLOR_NAME,
	DEVICE_NAME,
	CAPACITY_TYPE,
	GRADE_TYPE
FROM (
	SELECT 
	BUYING_DEVICE_NO,
	COLOR_NAME,
	DEVICE_NAME,
	CAPACITY_TYPE,
	GRADE_TYPE,
	BUYING_DEVICE_UPLOAD_DATE
	FROM
		BUYING_DEVICE BD
	LEFT JOIN
		COLOR C ON (BD.COLOR_NO = C.COLOR_NO)
	LEFT JOIN
		GRADE G ON (BD.GRADE_NUMBER = G.GRADE_NUMBER)
	LEFT JOIN
		CAPACITY CAP ON (BD.CAPACITY_NUMBER = CAP.CAPACITY_NUMBER)
	LEFT JOIN
		DEVICE D ON (BD.DEVICE_NO = D.DEVICE_NO)
	WHERE
		BD.DEVICE_NO = 3
	AND
		BD.COLOR_NO = 1
	AND
		BD.GRADE_NUMBER = 7
	AND
		BD.CAPACITY_NUMBER = 3
	AND
		SOLD_FL = 'N'
	ORDER BY BUYING_DEVICE_UPLOAD_DATE ASC
)
WHERE
	ROWNUM = 1;


SELECT *
FROM (
	SELECT *
	FROM
		POINT_LOG
	ORDER BY POINT_LOG_NO DESC
	)
WHERE MEMBER_NO = 13;



SELECT 
	POINT_LOG_BALANCE AS "BALANCE_POINT",
	POINT_LOG_AMOUNT AS "AMOUNT",
	(POINT_LOG_BALANCE - POINT_LOG_AMOUNT) AS "ORIGINAL_POINT"
FROM POINT_LOG PL
LEFT JOIN "ORDER" O ON (PL.POINT_LOG_NO = O.POINT_LOG_NO)
WHERE
	ORDER_NO = 9;




SELECT C.COLOR_NO AS "colorNo", 
		(
			SELECT COUNT(*)
			FROM BUYING_DEVICE
			WHERE
				DEVICE_NO = 3
			AND
				COLOR_NO = C.COLOR_NO
			AND
				SOLD_FL = 'N')
				 AS "colorCount"
		FROM
			COLOR C 
		LEFT JOIN 
			BUYING_DEVICE B ON (B.DEVICE_NO = C.DEVICE_NO)
		WHERE
			C.DEVICE_NO = 3
GROUP BY C.COLOR_NO;
	

SELECT *
FROM "MEMBER";



SELECT *
FROM BUYING_DEVICE;



-- 날짜 별 평균가 --
SELECT 
	TO_CHAR(BUYING_DEVICE_SOLD_DATE, 'YYYY-MM') AS "MONTH",
	ROUND(AVG(BUYING_DEVICE_PRICE), -3) AS "AVG_PRICE"
FROM BUYING_DEVICE
WHERE 
	DEVICE_NO = 3
AND	
	TO_CHAR(BUYING_DEVICE_SOLD_DATE, 'YYYY') = TO_CHAR(CURRENT_DATE, 'YYYY')
AND 
	SOLD_FL = 'Y'
GROUP BY TO_CHAR(BUYING_DEVICE_SOLD_DATE, 'YYYY-MM')
ORDER BY MONTH ASC;



		SELECT 
			MAX(BUYING_DEVICE_PRICE) AS "maxPrice",
			MIN(BUYING_DEVICE_PRICE) AS "minPrice",
			ROUND(AVG(BUYING_DEVICE_PRICE), -3) AS "avgPrice"
		FROM BUYING_DEVICE
		WHERE 
			DEVICE_NO = 3
		AND	
			TO_CHAR(BUYING_DEVICE_SOLD_DATE, 'YYYY') = TO_CHAR(CURRENT_DATE, 'YYYY')
		AND 
			SOLD_FL = 'Y';
		
		



SELECT * 
FROM "POINT_LOG";




SELECT *
FROM DEVICE D
LEFT JOIN BUYING_DEVICE BD ON (D.DEVICE_NO = BD.DEVICE_NO)
LEFT JOIN "ORDER" "O" ON (O.BUYING_DEVICE_NO = BD.BUYING_DEVICE_NO)
LEFT JOIN REVIEW R ON (O.ORDER_NO = R.ORDER_NO)
WHERE D.DEVICE_NO = 3;




/* 리뷰 목록 조회 */
SELECT *
FROM REVIEW R
JOIN "ORDER" O ON (O.ORDER_NO = R.ORDER_NO)
JOIN "BUYING_DEVICE" BD ON (BD.BUYING_DEVICE_NO = O.BUYING_DEVICE_NO)
JOIN "DEVICE" D ON (D.DEVICE_NO = BD.DEVICE_NO)
WHERE D.DEVICE_NO = 3;



SELECT *
FROM REVIEW;

/* 리뷰 개수 조회 */
SELECT 
	COUNT(R.REVIEW_NO) AS REVIEW_COUNT, 
	NVL(ROUND(AVG(R.REVIEW_SCORE), 1), 0) AS AVG_SCORE
FROM DEVICE D
LEFT JOIN BUYING_DEVICE BC ON (D.DEVICE_NO = BC.DEVICE_NO)
LEFT JOIN "ORDER" O ON (BC.BUYING_DEVICE_NO = O.BUYING_DEVICE_NO)
LEFT JOIN REVIEW R ON (O.ORDER_NO = R.ORDER_NO)
WHERE D.DEVICE_NO = 18
GROUP BY D.DEVICE_NO;


SELECT R.REVIEW_NO, 
       R.REVIEW_IMG, 
       R.REVIEW_CONTENT, 
       R.REVIEW_SCORE, 
       R.ORDER_NO,
       M.MEMBER_NAME,
       D.DEVICE_NAME,
       G.GRADE_TYPE,
       C.COLOR_NAME,
       CAP.CAPACITY_TYPE,
       
       
		  			CASE 
						WHEN CURRENT_DATE - R.REVIEW_DATE < 1 / 24 / 60
						THEN FLOOR((CURRENT_DATE - R.REVIEW_DATE) * 24 * 60 * 60) || '초 전'
						
						WHEN CURRENT_DATE - R.REVIEW_DATE <  1 / 24 
						THEN FLOOR((CURRENT_DATE - R.REVIEW_DATE) * 24 * 60) || '분 전'
						
						WHEN CURRENT_DATE - R.REVIEW_DATE <  1 
						THEN FLOOR((CURRENT_DATE - R.REVIEW_DATE) * 24) || '시간 전'
					
						ELSE TO_CHAR(R.REVIEW_DATE, 'YYYY-MM-DD')
					END AS REVIEW_DATE,
					R.REVIEW_DATE,
					ROWNUM
FROM REVIEW R
JOIN "ORDER" O ON R.ORDER_NO = O.ORDER_NO
JOIN BUYING_DEVICE BD ON O.BUYING_DEVICE_NO = BD.BUYING_DEVICE_NO
JOIN DEVICE D ON BD.DEVICE_NO = D.DEVICE_NO
JOIN "MEMBER" M ON O.MEMBER_NO = M.MEMBER_NO
JOIN GRADE G ON BD.GRADE_NUMBER = G.GRADE_NUMBER
JOIN COLOR C ON BD.COLOR_NO = C.COLOR_NO
JOIN CAPACITY CAP ON BD.CAPACITY_NUMBER = CAP.CAPACITY_NUMBER
WHERE D.DEVICE_NO = 3
AND ROWNUM <= 3
ORDER BY R.REVIEW_DATE DESC;


COMMIT;


			SELECT *
			FROM (
			
					 SELECT R.REVIEW_NO AS "REVIEW_NO", 
		       R.REVIEW_IMG, 
		       R.REVIEW_CONTENT, 
		       R.REVIEW_SCORE, 
		       R.ORDER_NO,
		       M.MEMBER_NAME AS "MEMBER_NAME",
		       D.DEVICE_NAME,
		       G.GRADE_TYPE,
		       C.COLOR_NAME,
		       CAP.CAPACITY_TYPE,

		  			CASE 
						WHEN CURRENT_DATE - R.REVIEW_DATE < 1 / 24 / 60
						THEN FLOOR((CURRENT_DATE - R.REVIEW_DATE) * 24 * 60 * 60) || '초 전'
						
						WHEN CURRENT_DATE - R.REVIEW_DATE <  1 / 24 
						THEN FLOOR((CURRENT_DATE - R.REVIEW_DATE) * 24 * 60) || '분 전'
						
						WHEN CURRENT_DATE - R.REVIEW_DATE <  1 
						THEN FLOOR((CURRENT_DATE - R.REVIEW_DATE) * 24) || '시간 전'
					
						ELSE TO_CHAR(R.REVIEW_DATE, 'YYYY-MM-DD')
					END AS REVIEW_DATE,
					FROM REVIEW R
					JOIN "ORDER" O ON R.ORDER_NO = O.ORDER_NO
					JOIN BUYING_DEVICE BD ON O.BUYING_DEVICE_NO = BD.BUYING_DEVICE_NO
					JOIN DEVICE D ON BD.DEVICE_NO = D.DEVICE_NO
					JOIN "MEMBER" M ON O.MEMBER_NO = M.MEMBER_NO
					JOIN GRADE G ON BD.GRADE_NUMBER = G.GRADE_NUMBER
					JOIN COLOR C ON BD.COLOR_NO = C.COLOR_NO
					JOIN CAPACITY CAP ON BD.CAPACITY_NUMBER = CAP.CAPACITY_NUMBER
					WHERE D.DEVICE_NO = 3
					ORDER BY REVIEW_NO DESC)
			WHERE ROWNUM < 6;
		

SELECT *
FROM (

	SELECT RE.*, ROWNUM AS "RN"
	FROM (
					SELECT R.REVIEW_NO AS "REVIEW_NO", 
		       R.REVIEW_IMG, 
		       R.REVIEW_CONTENT, 
		       R.REVIEW_SCORE, 
		       R.ORDER_NO,
		       M.MEMBER_NAME AS "MEMBER_NAME",
		       D.DEVICE_NAME,
		       G.GRADE_TYPE,
		       C.COLOR_NAME,
		       CAP.CAPACITY_TYPE,


		  			CASE 
						WHEN CURRENT_DATE - R.REVIEW_DATE < 1 / 24 / 60
						THEN FLOOR((CURRENT_DATE - R.REVIEW_DATE) * 24 * 60 * 60) || '초 전'
						
						WHEN CURRENT_DATE - R.REVIEW_DATE <  1 / 24 
						THEN FLOOR((CURRENT_DATE - R.REVIEW_DATE) * 24 * 60) || '분 전'
						
						WHEN CURRENT_DATE - R.REVIEW_DATE <  1 
						THEN FLOOR((CURRENT_DATE - R.REVIEW_DATE) * 24) || '시간 전'
					
						ELSE TO_CHAR(R.REVIEW_DATE, 'YYYY-MM-DD')
					END AS REVIEW_DATE
					FROM REVIEW R
					JOIN "ORDER" O ON R.ORDER_NO = O.ORDER_NO
					JOIN BUYING_DEVICE BD ON O.BUYING_DEVICE_NO = BD.BUYING_DEVICE_NO
					JOIN DEVICE D ON BD.DEVICE_NO = D.DEVICE_NO
					JOIN "MEMBER" M ON O.MEMBER_NO = M.MEMBER_NO
					JOIN GRADE G ON BD.GRADE_NUMBER = G.GRADE_NUMBER
					JOIN COLOR C ON BD.COLOR_NO = C.COLOR_NO
					JOIN CAPACITY CAP ON BD.CAPACITY_NUMBER = CAP.CAPACITY_NUMBER
					WHERE D.DEVICE_NO = 3
					ORDER BY REVIEW_NO DESC
		) "RE"
	
	)
ORDER BY RN ASC;








		SELECT *
		FROM (
		
			SELECT RE.*, ROWNUM AS "rn"
			FROM (
							SELECT R.REVIEW_NO AS "reviewNo" 
							FROM REVIEW R
							JOIN "ORDER" O ON R.ORDER_NO = O.ORDER_NO
							JOIN BUYING_DEVICE BD ON O.BUYING_DEVICE_NO = BD.BUYING_DEVICE_NO
							JOIN DEVICE D ON BD.DEVICE_NO = D.DEVICE_NO
							WHERE D.DEVICE_NO = 3
							ORDER BY "reviewNo" DESC
				) "RE"
			
			)
		WHERE "rn" = 4 + 1
		ORDER BY "rn" ASC;


	
SELECT ROUND((BD.BUYING_DEVICE_PRICE / 100), -2) AS PRICE
FROM "ORDER" O
JOIN BUYING_DEVICE BD ON (O.BUYING_DEVICE_NO = BD.BUYING_DEVICE_NO)
WHERE ORDER_NO = 14;


COMMIT;
		
INSERT INTO "CAPACITY_PRICE"
VALUES (
	57, 3, 0, 0					-- 기종 번호, 용량 코드, 가격
);

INSERT INTO "CAPACITY_PRICE"
VALUES (
	57, 4, 90000, 50000
);


COMMIT;

INSERT INTO "BUYING_DEVICE"
VALUES(
   SEQ_BUYING_DEVICE_NO.NEXTVAL,		-- 번호
   DEFAULT,   											-- 등록일
   NULL,														-- 판매일
   NULL,														-- 최종 구매가
   3,																-- 용량
   57,															-- 기종
   49,															-- 등급
   'N',
   71											-- 색상
);

COMMIT;






UPDATE "MEMBER" 
SET MEMBER_POINT = 999999999 
WHERE MEMBER_NO = 19; 



COMMIT;


		SELECT
			ORDER_NAME,
			REGEXP_REPLACE(ORDER_TEL, '(.{3})(.+)(.{4})', '\1-\2-\3') "ORDER_TEL",
			ORDER_COMMENT,
			ORDER_ADDRESS,
			MEMBER_NO,
			O.BUYING_DEVICE_NO AS "BUYING_DEVICE_NO",
			D.DEVICE_NAME AS "DEVICE_NAME",
			C.COLOR_NAME AS "COLOR_NAME",
			CP.CAPACITY_TYPE AS "CAPACITY_TYPE",
			G.GRADE_TYPE AS "GRADE_TYPE",
			COLOR_DEVICE_IMG,
			R.REVIEW_NO
		FROM "ORDER" O
		LEFT JOIN BUYING_DEVICE BD ON (O.BUYING_DEVICE_NO = BD.BUYING_DEVICE_NO)
		LEFT JOIN DEVICE D ON (BD.DEVICE_NO = D.DEVICE_NO)
		LEFT JOIN COLOR C ON (BD.COLOR_NO = C.COLOR_NO)
		LEFT JOIN CAPACITY CP ON (BD.CAPACITY_NUMBER = CP.CAPACITY_NUMBER)
		LEFT JOIN GRADE G ON (BD.GRADE_NUMBER = G.GRADE_NUMBER)
		LEFT JOIN REVIEW R ON (R.ORDER_NO = O.ORDER_NO)
		WHERE O.ORDER_NO = 16;





		SELECT
			O.ORDER_NO,
			ORDER_NAME,
			REGEXP_REPLACE(ORDER_TEL, '(.{3})(.+)(.{4})', '\1-\2-\3') "ORDER_TEL",
			ORDER_COMMENT,
			ORDER_ADDRESS,
			MEMBER_NO,
			OS.ORDER_STATUS_CONTENT,
			ORDER_DATE,
			O.BUYING_DEVICE_NO AS "BUYING_DEVICE_NO",
			D.DEVICE_NAME AS "DEVICE_NAME",
			C.COLOR_NAME AS "COLOR_NAME",
			CP.CAPACITY_TYPE AS "CAPACITY_TYPE",
			G.GRADE_TYPE AS "GRADE_TYPE",
			R.REVIEW_NO
		FROM "ORDER" O
		LEFT JOIN BUYING_DEVICE BD ON (O.BUYING_DEVICE_NO = BD.BUYING_DEVICE_NO)
		LEFT JOIN DEVICE D ON (BD.DEVICE_NO = D.DEVICE_NO)
		LEFT JOIN COLOR C ON (BD.COLOR_NO = C.COLOR_NO)
		LEFT JOIN CAPACITY CP ON (BD.CAPACITY_NUMBER = CP.CAPACITY_NUMBER)
		LEFT JOIN GRADE G ON (BD.GRADE_NUMBER = G.GRADE_NUMBER)
		LEFT JOIN ORDER_STATUS OS ON (OS.ORDER_STATUS_CODE = O.ORDER_STATUS_CODE)
		LEFT JOIN REVIEW R ON (R.ORDER_NO = O.ORDER_NO)
		WHERE MEMBER_NO = 19
		ORDER BY ORDER_DATE DESC;

		
		








							SELECT count(*)
							FROM REVIEW R
							JOIN "ORDER" O ON R.ORDER_NO = O.ORDER_NO
							JOIN BUYING_DEVICE BD ON O.BUYING_DEVICE_NO = BD.BUYING_DEVICE_NO
							JOIN DEVICE D ON BD.DEVICE_NO = D.DEVICE_NO
							WHERE D.DEVICE_NO = 7;






		SELECT 
			COUNT(R.REVIEW_NO) AS "reviewCount", 
			ROUND(AVG(R.REVIEW_SCORE), 1) AS "avgScore"
		FROM DEVICE D
		LEFT JOIN BUYING_DEVICE BC ON (D.DEVICE_NO = BC.DEVICE_NO)
		LEFT JOIN "ORDER" O ON (BC.BUYING_DEVICE_NO = O.BUYING_DEVICE_NO)
		LEFT JOIN REVIEW R ON (O.ORDER_NO = R.ORDER_NO)
		WHERE D.DEVICE_NO = 7
		GROUP BY D.DEVICE_NO;
	
	
		SELECT 
			BUYING_DEVICE_NO,
			COLOR_NAME,
			DEVICE_NAME,
			CAPACITY_TYPE,
			GRADE_TYPE,
			COLOR_DEVICE_IMG,
			BUYING_DEVICE_UPLOAD_DATE
		FROM (
			SELECT 
			BUYING_DEVICE_NO,
			COLOR_NAME,
			DEVICE_NAME,
			CAPACITY_TYPE,
			GRADE_TYPE,
			BUYING_DEVICE_UPLOAD_DATE,
			COLOR_DEVICE_IMG
			FROM
				BUYING_DEVICE BD
			LEFT JOIN
				COLOR C ON (BD.COLOR_NO = C.COLOR_NO)
			LEFT JOIN
				GRADE G ON (BD.GRADE_NUMBER = G.GRADE_NUMBER)
			LEFT JOIN
				CAPACITY CAP ON (BD.CAPACITY_NUMBER = CAP.CAPACITY_NUMBER)
			LEFT JOIN
				DEVICE D ON (BD.DEVICE_NO = D.DEVICE_NO)
			WHERE
				BD.DEVICE_NO = 57
			AND
				BD.COLOR_NO = 71
			AND
				BD.GRADE_NUMBER = 49
			AND
				BD.CAPACITY_NUMBER = 3
			AND
				SOLD_FL = 'N'
			ORDER BY BUYING_DEVICE_UPLOAD_DATE DESC
		)
		WHERE
			ROWNUM = 1;
		
		
		
		
		
		SELECT 
			TO_CHAR(BUYING_DEVICE_SOLD_DATE, 'YYYY-MM') AS "month",
			SUM(BUYING_DEVICE_PRICE) AS "sumPrice"
		FROM BUYING_DEVICE
		WHERE
			TO_CHAR(BUYING_DEVICE_SOLD_DATE, 'YYYY') = TO_CHAR(CURRENT_DATE, 'YYYY')
		AND 
			SOLD_FL = 'Y'
		GROUP BY TO_CHAR(BUYING_DEVICE_SOLD_DATE, 'YYYY-MM')
		ORDER BY "month" ASC;		
		
		
		
		SELECT 
			TO_CHAR(BUYING_DEVICE_SOLD_DATE, 'YYYY-MM') AS "month",
			SUM(BUYING_DEVICE_PRICE) AS "sumPrice"
		FROM BUYING_DEVICE
		WHERE
			TO_CHAR(BUYING_DEVICE_SOLD_DATE, 'YYYY') = TO_CHAR(CURRENT_DATE, 'YYYY')
		AND 
			SOLD_FL = 'Y'
		GROUP BY TO_CHAR(BUYING_DEVICE_SOLD_DATE, 'YYYY-MM')
		ORDER BY "month" ASC;		
		
		
	
	
SELECT
	TO_CHAR(SELLING_DEVICE_DATE, 'YYYY-MM') AS "month",
	-SUM(D.DEVICE_SELLING_PRICE + G.GRADE_SELL_PRICE + CP.CAPACITY_SELL_PRICE) AS sumSellPrice,
	COUNT(*) AS "countDevice"
FROM SELLING_DEVICE SD
LEFT JOIN GRADE G ON (SD.GRADE_NUMBER = G.GRADE_NUMBER)
LEFT JOIN CAPACITY_PRICE CP ON (CP.CAPACITY_NUMBER = SD.CAPACITY_NUMBER AND CP.DEVICE_NO = SD.DEVICE_NO)
LEFT JOIN DEVICE D ON (SD.DEVICE_NO = D.DEVICE_NO)
GROUP BY TO_CHAR(SELLING_DEVICE_DATE, 'YYYY-MM')
ORDER BY "month" ASC;		



		SELECT 
			TO_CHAR(BUYING_DEVICE_SOLD_DATE, 'YYYY-MM') AS "month",
			SUM(BUYING_DEVICE_PRICE) AS "sumPrice",
			COUNT(*) AS "countDevice"
		FROM BUYING_DEVICE
		WHERE
			TO_CHAR(BUYING_DEVICE_SOLD_DATE, 'YYYY') = TO_CHAR(CURRENT_DATE, 'YYYY')
		AND 
			SOLD_FL = 'Y'
		GROUP BY TO_CHAR(BUYING_DEVICE_SOLD_DATE, 'YYYY-MM')
		ORDER BY "month" ASC;		
		




SELECT
SD.DEVICE_NO,
	SD.SELLING_DEVICE_NO,
	SD.CAPACITY_NUMBER,
	D.DEVICE_SELLING_PRICE,
	G.GRADE_SELL_PRICE,
	CP.CAPACITY_SELL_PRICE

FROM SELLING_DEVICE SD
LEFT JOIN GRADE G ON (SD.GRADE_NUMBER = G.GRADE_NUMBER)
LEFT JOIN CAPACITY_PRICE CP ON (CP.CAPACITY_NUMBER = SD.CAPACITY_NUMBER AND CP.DEVICE_NO = SD.SELLING_DEVICE_NO)
LEFT JOIN DEVICE D ON (SD.DEVICE_NO = D.DEVICE_NO);
		
		

SELECT *
FROM SELLING_DEVICE SD
LEFT JOIN CAPACITY_PRICE CP ON (CP.CAPACITY_NUMBER = SD.CAPACITY_NUMBER AND CP.DEVICE_NO = SD.DEVICE_NO);




COMMIT;

-- 아이폰 15 플러스 용량 : 2, 3, 4 색상 : 28, 29, 30, 31, 32 등급 25 26 27
INSERT INTO "BUYING_DEVICE"
VALUES(
   SEQ_BUYING_DEVICE_NO.NEXTVAL,		-- 번호
   DEFAULT,   											-- 등록일
   NULL,														-- 판매일
   NULL,													-- 최종 구매가
   4,															-- 용량
   20,															-- 기종
   26,															-- 등급
   'N',
   31																-- 색상
);

COMMIT;

-- 갤럭시 s 23 플러스 용량 : 3, 4 색상 : 110, 111, 112, 113 등급 111 112 113
INSERT INTO "BUYING_DEVICE"
VALUES(
   SEQ_BUYING_DEVICE_NO.NEXTVAL,		-- 번호
   DEFAULT,   											-- 등록일
   NULL,														-- 판매일
   NULL,													-- 최종 구매가
   3,															-- 용량
   103,															-- 기종
   112,															-- 등급
   'N',
   111																-- 색상
);



COMMIT;

-- 갤럭시 폴드 5 용량 : 3, 4, 5 색상 : 122, 123, 124 등급 120 121 122
INSERT INTO "BUYING_DEVICE"
VALUES(
   SEQ_BUYING_DEVICE_NO.NEXTVAL,		-- 번호
   DEFAULT,   											-- 등록일
   NULL,														-- 판매일
   NULL,													-- 최종 구매가
   3,															-- 용량
   106,															-- 기종
   122,															-- 등급
   'N',
   111																-- 색상
);


